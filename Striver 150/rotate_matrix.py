'''
Given a 2-dimensional matrix of size ‘N’ x ‘M’, rotate the elements of the matrix clockwise.

For example:
Input Matrix: [ [ 1, 2, 3 ]
                [ 4, 5, 6 ]
                [ 7, 8, 9 ] ]

Output Matrix: [ [ 4, 1, 2 ]
                 [ 7, 5, 3 ]
                 [ 8, 9, 6 ] ]

The output matrix is generated by rotating the elements of the input matrix in a clockwise direction. Note that every element is rotated only once.
Note :
You do not need to print anything; it has already been taken care of. Also, update the given matrix in-place.
'''

class Solution:

    def rotate(self, matrix):
        start_row = 0
        end_row = len(matrix) -1
        start_col = 0
        end_col = len(matrix[0]) - 1

        while (start_row < end_row and start_col < end_col):

            prev = matrix[start_row+1][start_col]
            for i in range(start_col, end_col+1):
                curr = matrix[start_row][i]
                matrix[start_row][i] = prev
                prev = curr
            start_row +=1

            for i in range(start_row, end_row+1):
                curr = matrix[i][end_col]
                matrix[i][end_col] = prev
                prev = curr
            end_col -= 1

            for i in range(end_col, start_col-1, -1):
                curr = matrix[end_row][i]
                matrix[end_row][i] = prev
                prev = curr
            end_row -= 1

            for i in range(end_row, start_row-1, -1):
                curr = matrix[i][start_col]
                matrix[i][start_col] = prev
                prev = curr
            start_col += 1

        print(matrix)

if __name__ == "__main__":
    Solution().rotate([ [ 1, 2, 3 ],
                [ 4, 5, 6 ],
                [ 7, 8, 9 ] ])